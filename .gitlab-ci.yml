default:
  image: rust:latest

variables:
  POSTGRES_HOST: postgres
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: password
  POSTGRES_DB: newsletter
  POSTGRES_PORT: 5432

stages: # List of stages for jobs, and their order of execution
  - test
  - deploy

reformat-job:
  stage: .pre
  rules:
    - when: manual
  script:
    - rustup component add rustfmt
    - cargo fmt -- --check

unit-test-job: # This job runs in the test stage.
  stage: test    # It only starts when the job in the build stage completes successfully.
  rules:
    - when: manual
  services:
    - postgres:latest
  variables:
    PIPELINE__DATABASE__HOST: $POSTGRES_HOST
  script:
    - cargo install sqlx-cli --version='~0.7' --features rustls,postgres --no-default-features --locked
    - apt-get update -yq && apt-get install -yq mold clang postgresql postgresql-client libpq-dev
    - SKIP_DOCKER=true source ./scripts/init_db.sh
    - cargo sqlx prepare --workspace --check
    - cargo test

lint-test-job: # This job also runs in the test stage.
  stage: test    # It can run at the same time as unit-test-job (in parallel).
  rules:
    - when: manual
  services:
    - postgres:latest
  script:
    - cargo install sqlx-cli --version='~0.7' --features rustls,postgres --no-default-features --locked
    - apt-get update -yq && apt-get install -yq mold clang postgresql postgresql-client libpq-dev
    - SKIP_DOCKER=true source ./scripts/init_db.sh
    - rustup component add clippy
    - cargo clippy -- -D warnings

#coverage-test-job:
#  stage: test
#  script:
#    - cargo install cargo-tarpaulin
#    - cargo tarpaulin --ignore-tests

deploy-job: # This job runs in the deployment stage.
  stage: deploy  # It only runs when *both* jobs in the test stage complete successfully.
  rules:
    - when: manual
  environment: production
  script:
    - echo "Deploying application..."
    - echo "Application successfully deployed."

#vulnerability-check-job:
#  stage: .post
#  script:
#    - cargo install cargo-audit
#    - cargo audit

